import streamlit as st
from soil1 import CropRecommendationSystem
import streamlit.components.v1 as components

# Basic page config
st.set_page_config(
    page_title="Crop Recommendation System",
    page_icon="ЁЯМ╛",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# Add this at the top of app.py
translations = {
    'hi': {
        'crops': {
            'rice': 'рдЪрд╛рд╡рд▓',
            'wheat': 'рдЧреЗрд╣реВрдВ',
            'sugarcane': 'рдЧрдиреНрдирд╛',
            'jute': 'рдЬреВрдЯ',
            'oilseeds': 'рддрд┐рд▓рд╣рди',
            'pulses': 'рджрд╛рд▓реЗрдВ',
            'cotton': 'рдХрдкрд╛рд╕',
            'millets': 'рдмрд╛рдЬрд░рд╛',
            'gram': 'рдЪрдирд╛',
            'groundnut': 'рдореВрдВрдЧрдлрд▓реА',
            'maize': 'рдордХреНрдХрд╛',
            'barley': 'рдЬреМ',
            'tea': 'рдЪрд╛рдп',
            'coffee': 'рдХреЙрдлреА',
            'spices': 'рдорд╕рд╛рд▓реЗ',
            'tropical fruits': 'рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдлрд▓',
            'coconut': 'рдирд╛рд░рд┐рдпрд▓',
            'areca nut': 'рд╕реБрдкрд╛рд░реА',
            'banana': 'рдХреЗрд▓рд╛',
            'vegetables': 'рд╕рдмреНрдЬрд┐рдпрд╛рдВ',
            'tapioca': 'рдХрд╕рд╛рд╡рд╛',
            'pineapple': 'рдЕрдирд╛рдирд╛рд╕',
            'pepper': 'рдХрд╛рд▓реА рдорд┐рд░реНрдЪ',
            'rape': 'рд╕рд░рд╕реЛрдВ'
        },
        'soils': {
            'Alluvial Soil': 'рдЬрд▓реЛрдврд╝ рдорд┐рдЯреНрдЯреА',
            'Red Soil': 'рд▓рд╛рд▓ рдорд┐рдЯреНрдЯреА',
            'Black Soil': 'рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА',
            'Mountain Soil': 'рдкрд░реНрд╡рддреАрдп рдорд┐рдЯреНрдЯреА',
            'Laterite Soil': 'рд▓реИрдЯреЗрд░рд╛рдЗрдЯ рдорд┐рдЯреНрдЯреА',
            'Desert Soil': 'рд░реЗрдЧрд┐рд╕реНрддрд╛рдиреА рдорд┐рдЯреНрдЯреА'
        }
    },
    'mr': {
        'crops': {
            'rice': 'рддрд╛рдВрджреВрд│',
            'wheat': 'рдЧрд╣реВ',
            'sugarcane': 'рдКрд╕',
            'jute': 'рддрд╛рдЧ',
            'oilseeds': 'рддреЗрд▓рдмрд┐рдпрд╛',
            'pulses': 'рдбрд╛рд│реА',
            'cotton': 'рдХрд╛рдкреВрд╕',
            'millets': 'рдЬреНрд╡рд╛рд░реА',
            'gram': 'рд╣рд░рднрд░рд╛',
            'groundnut': 'рднреБрдИрдореВрдЧ',
            'maize': 'рдордХрд╛',
            'barley': 'рдЬрд╡',
            'tea': 'рдЪрд╣рд╛',
            'coffee': 'рдХреЙрдлреА',
            'spices': 'рдорд╕рд╛рд▓реЗ',
            'tropical fruits': 'рдЙрд╖реНрдгрдХрдЯрд┐рдмрдВрдзреАрдп рдлрд│реЗ',
            'coconut': 'рдирд╛рд░рд│',
            'areca nut': 'рд╕реБрдкрд╛рд░реА',
            'banana': 'рдХреЗрд│реА',
            'vegetables': 'рднрд╛рдЬреНрдпрд╛',
            'tapioca': 'рдХрд╕рд╛рд╡рд╛',
            'pineapple': 'рдЕрдирдирд╕',
            'pepper': 'рдорд┐рд░реА',
            'rape': 'рдореЛрд╣рд░реА'
        },
        'soils': {
            'Alluvial Soil': 'рдЧрд╛рд│рд╛рдЪреА рдорд╛рддреА',
            'Red Soil': 'рддрд╛рдВрдмрдбреА рдорд╛рддреА',
            'Black Soil': 'рдХрд╛рд│реА рдорд╛рддреА',
            'Mountain Soil': 'рдбреЛрдВрдЧрд░рд╛рд│ рдорд╛рддреА',
            'Laterite Soil': 'рд▓реЕрдЯреЗрд░рд╛рдИрдЯ рдорд╛рддреА',
            'Desert Soil': 'рд╡рд╛рд│рд╡рдВрдЯреА рдорд╛рддреА'
        }
    }
}

def main():
    # Updated CSS with specific h1 color
    st.markdown("""
        <style>
        .stApp {
            background-color: white;
        }
        
        .stButton > button {
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
        }
        
        h1 {
            color: #4CAF50 !important;
            font-weight: bold;
        }
        
        h2, h3 {
            color: #2E7D32;
            font-weight: bold;
        }
        
        .stSelectbox label, .stSlider label {
            color: #2E7D32;
            font-weight: 600;
        }

        p {
            color: #1B5E20;
            font-weight: 500;
        }

        .stSuccess {
            color: #1B5E20;
            font-weight: bold;
        }

        .stSelectbox div[role="listbox"] div {
            color: #1B5E20;
        }
        </style>
    """, unsafe_allow_html=True)

    # Language selector in top right corner
    selected_language = st.selectbox(
        "",
        options=[
            "English",
            "рдорд░рд╛рдареА (Marathi)",
            "рд╣рд┐рдВрджреА (Hindi)"
        ],
        index=0,
        key="language_selector"
    )

    # Convert display language to language code
    lang_code = {
        "English": "en",
        "рдорд░рд╛рдареА (Marathi)": "mr",
        "рд╣рд┐рдВрджреА (Hindi)": "hi"
    }[selected_language]

    # Title and description based on selected language
    titles = {
        "en": "Crop Recommendation System",
        "mr": "рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕ рдкреНрд░рдгрд╛рд▓реА",
        "hi": "рдлрд╕рд▓ рдЕрдиреБрд╢рдВрд╕рд╛ рдкреНрд░рдгрд╛рд▓реА"
    }
    
    descriptions = {
        "en": "Enter soil and environmental parameters to get crop recommendations",
        "mr": "рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА рдореГрджрд╛ рдЖрдгрд┐ рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдорд╛рдкрджрдВрдб рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛",
        "hi": "рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдорд┐рдЯреНрдЯреА рдФрд░ рдкрд░реНрдпрд╛рд╡рд░рдг рдорд╛рдкрджрдВрдб рджрд░реНрдЬ рдХрд░реЗрдВ"
    }

    st.title(titles[lang_code])
    st.write(descriptions[lang_code])

    # Input labels in different languages
    labels = {
        "en": {
            "soil_type": "Soil Type",
            "temperature": "Temperature (┬░C)",
            "humidity": "Humidity (%)",
            "rainfall": "Rainfall (mm)",
            "ph": "pH Level",
            "submit": "Get Recommendations",
            "soil_types": ["Alluvial Soil", "Red Soil", "Black Soil", "Mountain Soil", "Laterite Soil", "Desert Soil"]
        },
        "mr": {
            "soil_type": "рдореГрджрд╛ рдкреНрд░рдХрд╛рд░",
            "temperature": "рддрд╛рдкрдорд╛рди (┬░C)",
            "humidity": "рдЖрд░реНрджреНрд░рддрд╛ (%)",
            "rainfall": "рдкрд░реНрдЬрдиреНрдпрдорд╛рди (рдорд┐рдореА)",
            "ph": "рд╕рд╛рдореВ рдкрд╛рддрд│реА",
            "submit": "рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рд╛",
            "soil_types": ["рдЧрд╛рд│рд╛рдЪреА рдореГрджрд╛", "рддрд╛рдВрдмрдбреА рдореГрджрд╛", "рдХрд╛рд│реА рдореГрджрд╛", "рдбреЛрдВрдЧрд░рд╛рд│ рдореГрджрд╛", "рд▓реЕрдЯреЗрд░рд╛рдЗрдЯ рдореГрджрд╛", "рд╡рд╛рд│рд╡рдВрдЯреА рдореГрджрд╛"]
        },
        "hi": {
            "soil_type": "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░",
            "temperature": "рддрд╛рдкрдорд╛рди (┬░C)",
            "humidity": "рдЖрд░реНрджреНрд░рддрд╛ (%)",
            "rainfall": "рд╡рд░реНрд╖рд╛ (рдорд┐рдореА)",
            "ph": "рдкреАрдПрдЪ рд╕реНрддрд░",
            "submit": "рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
            "soil_types": ["рдЬрд▓реЛрдв рдорд┐рдЯреНрдЯреА", "рд▓рд╛рд▓ рдорд┐рдЯреНрдЯреА", "рдХрд╛рд▓реА рдорд┐рдЯреНрдЯреА", "рдкрд░реНрд╡рддреАрдп рдорд┐рдЯреНрдЯреА", "рд▓реИрдЯреЗрд░рд╛рдЗрдЯ рдорд┐рдЯреНрдЯреА", "рдорд░реБрд╕реНрдерд▓реАрдп рдорд┐рдЯреНрдЯреА"]
        }
    }

    # Create form
    soil_type = st.selectbox(
        labels[lang_code]["soil_type"],
        options=range(1, 7),
        format_func=lambda x: labels[lang_code]["soil_types"][x-1]
    )
    
    temperature = st.slider(
        labels[lang_code]["temperature"],
        min_value=0,
        max_value=50,
        value=25
    )
    
    humidity = st.slider(
        labels[lang_code]["humidity"],
        min_value=0,
        max_value=100,
        value=70
    )
    
    rainfall = st.slider(
        labels[lang_code]["rainfall"],
        min_value=0,
        max_value=500,
        value=200
    )
    
    ph = st.slider(
        labels[lang_code]["ph"],
        min_value=0.0,
        max_value=14.0,
        value=7.0,
        step=0.1
    )

    if st.button(labels[lang_code]["submit"]):
        recommender = CropRecommendationSystem()
        prediction = recommender.predict_from_parameters(
            soil_type=soil_type,
            temperature=temperature,
            humidity=humidity,
            rainfall=rainfall,
            ph=ph
        )

        # Display results
        result_labels = {
            "en": {
                "soil_type": "Soil Type",
                "recommended": "Recommended Crop",
                "suitable": "Suitable Crops"
            },
            "mr": {
                "soil_type": "рдореГрджрд╛ рдкреНрд░рдХрд╛рд░",
                "recommended": "рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реЗрд▓реЗ рдкреАрдХ",
                "suitable": "рдпреЛрдЧреНрдп рдкрд┐рдХреЗ"
            },
            "hi": {
                "soil_type": "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░",
                "recommended": "рдЕрдиреБрд╢рдВрд╕рд┐рдд рдлрд╕рд▓",
                "suitable": "рдЙрдкрдпреБрдХреНрдд рдлрд╕рд▓реЗрдВ"
            }
        }

        st.success(f"{result_labels[lang_code]['soil_type']}: {labels[lang_code]['soil_types'][soil_type-1]}")
        
        # Fix for recommended crop translation
        if lang_code == "en":
            st.success(f"{result_labels[lang_code]['recommended']}: {prediction['recommended_crop']}")
        else:
            # Translate the recommended crop
            translated_recommended = translations[lang_code]['crops'].get(prediction['recommended_crop'], prediction['recommended_crop'])
            st.success(f"{result_labels[lang_code]['recommended']}: {translated_recommended}")
        
        # Display suitable crops
        suitable_crops = prediction['suitable_crops']
        if lang_code == "en":
            st.success(f"{result_labels[lang_code]['suitable']}: {', '.join(suitable_crops)}")
        else:
            translated_crops = [translations[lang_code]['crops'].get(crop, crop) for crop in suitable_crops]
            st.success(f"{result_labels[lang_code]['suitable']}: {', '.join(translated_crops)}")

if __name__ == "__main__":
    main()